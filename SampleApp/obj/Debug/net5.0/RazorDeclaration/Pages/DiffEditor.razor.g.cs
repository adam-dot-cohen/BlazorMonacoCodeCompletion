// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SampleApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using SampleApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using SampleApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\_Imports.razor"
using BlazorMonaco;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/diff-editor")]
    public partial class DiffEditor : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 31 "e:\github\BlazorMonacoCodeCompletion\BlazorMonaco\SampleApp\Pages\DiffEditor.razor"
       
    private MonacoDiffEditor _diffEditor { get; set; }
    private string ValueToSetOriginal { get; set; }
    private string ValueToSetModified { get; set; }

    private DiffEditorConstructionOptions DiffEditorConstructionOptions(MonacoDiffEditor editor)
    {
        return new DiffEditorConstructionOptions
        {
            OriginalEditable = true
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        // Get or create the original model
        TextModel original_model = await MonacoEditorBase.GetModel("sample-diff-editor-originalModel");
        if (original_model == null)
        {
            var original_value = "\"use strict\";\n" +
                            "function Person(age) {\n" +
                            "	if (age) {\n" +
                            "		this.age = age;\n" +
                            "	}\n" +
                            "}\n" +
                            "Person.prototype.getAge = function () {\n" +
                            "	return this.age;\n" +
                            "};\n";
            original_model = await MonacoEditorBase.CreateModel(original_value, "javascript", "sample-diff-editor-originalModel");
        }

        // Get or create the modified model
        TextModel modified_model = await MonacoEditorBase.GetModel("sample-diff-editor-modifiedModel");
        if (modified_model == null)
        {
            var modified_value = "\"don't use strict\";\n" +
                            "furction Person(age_is_just_a_number) {\n" +
                            "	if (age_is_just_a_number) {\n" +
                            "		this.age_is_just_a_number = age_is_just_a_number;\n" +
                            "	}\n" +
                            "}\n" +
                            "Person.prototype.getAge = function () {\n" +
                            "	return this.age_is_just_a_number;\n" +
                            "};\n" +
                            "//Really, it is just a number people!";
            modified_model = await MonacoEditorBase.CreateModel(modified_value, "javascript", "sample-diff-editor-modifiedModel");
        }

        // Set the editor model
        await _diffEditor.SetModel(new DiffEditorModel
        {
            Original = original_model,
            Modified = modified_model
        });
    }

    private void EditorOnKeyUpOriginal(KeyboardEvent keyboardEvent)
    {
        Console.WriteLine("OnKeyUpOriginal : " + keyboardEvent.Code);
    }

    private void EditorOnKeyUpModified(KeyboardEvent keyboardEvent)
    {
        Console.WriteLine("OnKeyUpModified : " + keyboardEvent.Code);
    }

    private async Task SetValueOriginal()
    {
        Console.WriteLine($"setting original value to: {ValueToSetOriginal}");
        await _diffEditor.OriginalEditor.SetValue(ValueToSetOriginal);
    }

    private async Task SetValueModified()
    {
        Console.WriteLine($"setting modified value to: {ValueToSetModified}");
        await _diffEditor.ModifiedEditor.SetValue(ValueToSetModified);
    }

    private async Task GetValueOriginal()
    {
        var val = await _diffEditor.OriginalEditor.GetValue();
        Console.WriteLine($"original value is: {val}");
    }

    private async Task GetValueModified()
    {
        var val = await _diffEditor.ModifiedEditor.GetValue();
        Console.WriteLine($"modified value is: {val}");
    }

    private async Task AddCommand()
    {
        await _diffEditor.ModifiedEditor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.Enter, (editor, keyCode) =>
        {
            Console.WriteLine($"Ctrl+Enter : Original Editor command is triggered. ({editor.Id})");
        });
    }

    private async Task AddAction()
    {
        await _diffEditor.ModifiedEditor.AddAction("testAction", "Test Action", new int[] { (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_D, (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_B }, null, null, "navigation", 1.5, (editor, keyCodes) =>
        {
            Console.WriteLine($"Ctrl+D : Modified Editor action is triggered. ({editor.Id})");
        });
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
