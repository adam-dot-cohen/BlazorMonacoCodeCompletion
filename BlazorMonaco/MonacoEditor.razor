@inherits MonacoEditorBase
@using BlazorMonaco.Bridge
@using Microsoft.JSInterop
@using System.Text.Json

<div id="@Id" class="monaco-editor-container @CssClass"></div>

@code {
    [Parameter]
    public string Value { get; set; }

    [Parameter] public Func<MonacoEditor, StandaloneEditorConstructionOptions> ConstructionOptions { get; set; } // should move to base
    [Parameter] public EventCallback<MonacoEditor> OnDidCompositionEnd { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidCompositionStart { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnContextMenu { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidBlurEditorText { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidBlurEditorWidget { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidChangeConfiguration { get; set; }
    [Parameter] public EventCallback<CursorPositionChangedEvent> OnDidChangeCursorPosition { get; set; }
    [Parameter] public EventCallback<CursorSelectionChangedEvent> OnDidChangeCursorSelection { get; set; }
    //OnDidChangeModel
    //OnDidChangeModelContent
    //OnDidChangeModelDecorations
    //OnDidChangeModelLanguage
    //OnDidChangeModelLanguageConfiguration
    //OnDidChangeModelOptions
    [Parameter] public EventCallback<ContentSizeChangedEvent> OnDidContentSizeChange { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidDispose { get; set; } // should move to base
    [Parameter] public EventCallback<MonacoEditor> OnDidFocusEditorText { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidFocusEditorWidget { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidInit { get; set; } // should move to base
    [Parameter] public EventCallback<EditorLayoutInfo> OnDidLayoutChange { get; set; }
    [Parameter] public EventCallback<PasteEvent> OnDidPaste { get; set; }
    [Parameter] public EventCallback<ScrollEvent> OnDidScrollChange { get; set; }
    [Parameter] public EventCallback<KeyboardEvent> OnKeyDown { get; set; }
    [Parameter] public EventCallback<KeyboardEvent> OnKeyUp { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseDown { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseLeave { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseMove { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseUp { get; set; }

    private List<string> deltaDecorationIds { get; set; } = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrWhiteSpace(Id))
        {
            Id = "blazor-monaco-" + Guid.NewGuid().ToString();
        }

        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Create the editor
            StandaloneEditorConstructionOptions options = ConstructionOptions?.Invoke(this);
            await MonacoEditor.Create(Id, Value, options);

            // Set editor event listeners
            if (OnDidCompositionEnd.HasDelegate)
                await SetEventListener("OnDidCompositionEnd");
            if (OnDidCompositionStart.HasDelegate)
                await SetEventListener("OnDidCompositionStart");
            if (OnContextMenu.HasDelegate)
                await SetEventListener("OnContextMenu");
            if (OnDidBlurEditorText.HasDelegate)
                await SetEventListener("OnDidBlurEditorText");
            if (OnDidBlurEditorWidget.HasDelegate)
                await SetEventListener("OnDidBlurEditorWidget");
            if (OnDidChangeConfiguration.HasDelegate)
                await SetEventListener("OnDidChangeConfiguration");
            if (OnDidChangeCursorPosition.HasDelegate)
                await SetEventListener("OnDidChangeCursorPosition");
            if (OnDidChangeCursorSelection.HasDelegate)
                await SetEventListener("OnDidChangeCursorSelection");
            if (OnDidContentSizeChange.HasDelegate)
                await SetEventListener("OnDidContentSizeChange");
            if (OnDidDispose.HasDelegate) // should move to base
                await SetEventListener("OnDidDispose");
            if (OnDidFocusEditorText.HasDelegate)
                await SetEventListener("OnDidFocusEditorText");
            if (OnDidFocusEditorWidget.HasDelegate)
                await SetEventListener("OnDidFocusEditorWidget");
            if (OnDidLayoutChange.HasDelegate)
                await SetEventListener("OnDidLayoutChange");
            if (OnDidPaste.HasDelegate)
                await SetEventListener("OnDidPaste");
            if (OnDidScrollChange.HasDelegate)
                await SetEventListener("OnDidScrollChange");
            if (OnKeyDown.HasDelegate)
                await SetEventListener("OnKeyDown");
            if (OnKeyUp.HasDelegate)
                await SetEventListener("OnKeyUp");
            if (OnMouseDown.HasDelegate)
                await SetEventListener("OnMouseDown");
            if (OnMouseLeave.HasDelegate)
                await SetEventListener("OnMouseLeave");
            if (OnMouseMove.HasDelegate)
                await SetEventListener("OnMouseMove");
            if (OnMouseUp.HasDelegate)
                await SetEventListener("OnMouseUp");

            await OnDidInit.InvokeAsync(this); // should move to base

            await base.OnAfterRenderAsync(firstRender);
        }
    }

    [JSInvokable]
    public override async Task EventCallback(string eventName, string eventJson)
    {
        var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };

        switch (eventName)
        {
            case "OnDidCompositionEnd": await OnDidCompositionEnd.InvokeAsync(this); break;
            case "OnDidCompositionStart": await OnDidCompositionStart.InvokeAsync(this); break;
            case "OnContextMenu": if (eventJson != null) await OnContextMenu.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnDidBlurEditorText": await OnDidBlurEditorText.InvokeAsync(this); break;
            case "OnDidBlurEditorWidget": await OnDidBlurEditorWidget.InvokeAsync(this); break;
            case "OnDidChangeConfiguration": await OnDidChangeConfiguration.InvokeAsync(this); break;
            case "OnDidChangeCursorPosition": await OnDidChangeCursorPosition.InvokeAsync(JsonSerializer.Deserialize<CursorPositionChangedEvent>(eventJson, jsonOptions)); break;
            case "OnDidChangeCursorSelection": await OnDidChangeCursorSelection.InvokeAsync(JsonSerializer.Deserialize<CursorSelectionChangedEvent>(eventJson, jsonOptions)); break;
            case "OnDidContentSizeChange": await OnDidContentSizeChange.InvokeAsync(JsonSerializer.Deserialize<ContentSizeChangedEvent>(eventJson, jsonOptions)); break;
            case "OnDidDispose": await OnDidDispose.InvokeAsync(this); break; // should move to base
            case "OnDidFocusEditorText": await OnDidFocusEditorText.InvokeAsync(this); break;
            case "OnDidFocusEditorWidget": await OnDidFocusEditorWidget.InvokeAsync(this); break;
            case "OnDidLayoutChange": if (eventJson != null) await OnDidLayoutChange.InvokeAsync(JsonSerializer.Deserialize<EditorLayoutInfo>(eventJson, jsonOptions)); break;
            case "OnDidPaste": if (eventJson != null) await OnDidPaste.InvokeAsync(JsonSerializer.Deserialize<PasteEvent>(eventJson, jsonOptions)); break;
            case "OnDidScrollChange": if (eventJson != null) await OnDidScrollChange.InvokeAsync(JsonSerializer.Deserialize<ScrollEvent>(eventJson, jsonOptions)); break;
            case "OnKeyDown": if (eventJson != null) await OnKeyDown.InvokeAsync(JsonSerializer.Deserialize<KeyboardEvent>(eventJson, jsonOptions)); break;
            case "OnKeyUp": if (eventJson != null) await OnKeyUp.InvokeAsync(JsonSerializer.Deserialize<KeyboardEvent>(eventJson, jsonOptions)); break;
            case "OnMouseDown": if (eventJson != null) await OnMouseDown.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnMouseLeave": if (eventJson != null) await OnMouseLeave.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnMouseMove": if (eventJson != null) await OnMouseMove.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnMouseUp": if (eventJson != null) await OnMouseUp.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
        }

        await base.EventCallback(eventName, eventJson);
    }

    #region Instance Methods

    // addAction : base

    // addCommand : base

    // addContentWidget

    // addOverlayWidget

    // applyFontInfo

    // changeViewZones

    // createContextKey

    public async Task<string[]> DeltaDecorations(string[] oldDecorationIds, ModelDeltaDecoration[] newDecorations)
    {
        if (jsRuntime == null)
            return default;

        if (oldDecorationIds == null)
            oldDecorationIds = new string[] { };

        // Convert the newDecorations object into a JsonElement to get rid of the properties with null values
        var newDecorationsJson = JsonSerializer.Serialize(newDecorations, new JsonSerializerOptions
        {
            IgnoreNullValues = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
        var newDecorationsElement = JsonSerializer.Deserialize<JsonElement>(newDecorationsJson);
        var newDecorationIds = await jsRuntime.InvokeAsync<string[]>("blazorMonaco.editor.deltaDecorations", Id, oldDecorationIds, newDecorationsElement);
        deltaDecorationIds.RemoveAll(d => oldDecorationIds.Any(o => o == d));
        deltaDecorationIds.AddRange(newDecorationIds);
        return newDecorationIds;
    }

    // dispose : base (disposeEditor)

    // executeCommand

    // executeCommands

    // executeEdits

    // focus : base

    // getAction

    public async Task<string> GetContainerDomNodeId()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getContainerDomNodeId", Id);
    }

    public async Task<double> GetContentHeight()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getContentHeight", Id);
    }

    public async Task<double> GetContentWidth()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getContentWidth", Id);
    }

    // getContribution

    //---- getDomNode : base

    // getEditorType : base

    //---- getId : base

    public async Task<EditorLayoutInfo> GetLayoutInfo()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<EditorLayoutInfo>("blazorMonaco.editor.getLayoutInfo", Id);
    }

    // getLineDecorations

    // getModel : base

    public async Task<int> GetOffsetForColumn(int lineNumber, int column)
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<int>("blazorMonaco.editor.getOffsetForColumn", Id, lineNumber, column);
    }

    public async Task<string> GetOption(EditorOption option)
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getOption", Id, (int)option);
    }

    public async Task<List<string>> GetOptions()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<List<string>>("blazorMonaco.editor.getOptions", Id);
    }

    // getPosition : base

    public async Task<EditorOptions> GetRawOptions()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<EditorOptions>("blazorMonaco.editor.getRawOptions", Id);
    }

    public async Task<double> GetScrollHeight()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollHeight", Id);
    }

    public async Task<double> GetScrollLeft()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollLeft", Id);
    }

    public async Task<double> GetScrollTop()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollTop", Id);
    }

    public async Task<double> GetScrollWidth()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollWidth", Id);
    }

    public async Task<Position> GetScrolledVisiblePosition(Position position)
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<Position>("blazorMonaco.editor.getScrolledVisiblePosition", Id, position);
    }

    // getSelection : base

    // getSelections : base

    // getSupportedActions : base

    public async Task<MouseTarget> GetTargetAtClientPoint(int clientX, int clientY)
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<MouseTarget>("blazorMonaco.editor.getTargetAtClientPoint", Id, clientX, clientY);
    }

    public async Task<double> GetTopForLineNumber(int lineNumber)
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getTopForLineNumber", Id, lineNumber);
    }

    public async Task<double> GetTopForPosition(int lineNumber, int column)
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getTopForPosition", Id, lineNumber, column);
    }

    public async Task<string> GetValue()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getValue", Id);
    }

    // getVisibleColumnFromPosition : base

    public async Task<List<Range>> GetVisibleRanges()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<List<Range>>("blazorMonaco.editor.getVisibleRanges", Id);
    }

    // hasTextFocus : base

    public async Task<bool> HasWidgetFocus()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<bool>("blazorMonaco.editor.hasWidgetFocus", Id);
    }

    // layout : base

    // layoutContentWidget

    // layoutOverlayWidget

    public async Task<bool> PushUndoStop()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<bool>("blazorMonaco.editor.pushUndoStop", Id);
    }

    // removeContentWidget

    // removeOverlayWidget

    public async Task Render(bool? forceRedraw = null)
    {
        if (jsRuntime == null)
            return;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.render", Id, forceRedraw);
    }

    public async Task ResetDeltaDecorations()
    {
        if (jsRuntime == null)
            return;
        await DeltaDecorations(deltaDecorationIds.ToArray(), new ModelDeltaDecoration[0]);
    }

    // restoreViewState : base

    // revealLine : base

    // revealLineInCenter : base

    // revealLineInCenterIfOutsideViewport : base

    // revealLines : base

    // revealLinesInCenter : base

    // revealLinesInCenterIfOutsideViewport : base

    // revealPosition : base

    // revealPositionInCenter : base

    // revealPositionInCenterIfOutsideViewport : base

    // revealRange : base

    // revealRangeAtTop : base

    // revealRangeInCenter : base

    // revealRangeInCenterIfOutsideViewport : base

    // saveViewState : base

    // setModel : base

    // setPosition : base

    public async Task SetScrollLeft(int newScrollLeft)
    {
        if (jsRuntime == null)
            return;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setScrollLeft", Id, newScrollLeft);
    }

    public async Task SetScrollPosition(int newScrollLeft, int newScrollTop)
    {
        if (jsRuntime == null)
            return;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setScrollPosition", Id, newScrollLeft, newScrollTop);
    }

    public async Task SetScrollTop(int newScrollTop)
    {
        if (jsRuntime == null)
            return;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setScrollTop", Id, newScrollTop);
    }

    // setSelection : base

    // setSelections : base

    public async Task SetValue(string newValue)
    {
        if (jsRuntime == null)
            return;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setValue", Id, newValue);
    }

    // trigger : base

    // updateOptions : base    

    #endregion

}
